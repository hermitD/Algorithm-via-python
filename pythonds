notes under http://interactivepython.org/runestone/static/pythonds

class:
__init__
__str__
__add__
__eq__

class xxadvaced(xx):
	...#inheritance


1		constant
logn	Logarithmic
n		linear
nlogn	LogLinear
n2		Quadratic
n3		cubic
2n		Exponential


List:
t1 = Timer("test1()", "from __main__ import test1")
print("concat ",t1.timeit(number=1000), "milliseconds")


index []			O(1)
index assignment	O(1)
append				O(1)
pop()				O(1)
pop(i)				O(n)
insert(i,item)		O(n)
del operator		O(n)
iteration			O(n)
contains (in)		O(n)
get slice [x:y]		O(k)
del slice			O(n)
set slice			O(n+k)
reverse				O(n)
concatenate			O(k)
sort				O(n log n)
multiply			O(nk)

Dicts:


copy	O(n)
get item			O(1)
set item			O(1)
delete item			O(1)
contains (in)		O(1)
iteration			O(n)



all recursive algorithms must obey three important laws:

A recursive algorithm must have a base case.
A recursive algorithm must change its state and move toward the base case.
A recursive algorithm must call itself, recursively.

Comparing the Performance of Different Map Implementations
operation	Sorted List	Hash Table	Binary Search Tree	AVL Tree
put			O(n)		O(1)		O(n)				O(log2n)
get			O(log2n)	O(1)		O(n)				O(log2n)
in			O(log2n)	O(1)		O(n)				O(log2n)
del			O(n))		O(1)		O(n)				O(log2n)





